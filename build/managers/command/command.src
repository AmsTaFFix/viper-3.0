PARAMETER_TYPES={"STRING":"string","NUMBER":"number","BOOLEAN":"boolean","REST":"rest","FLAG":"flag","OPTIONS":"options"}
OptionsParameter={}
OptionsParameter.name=null
OptionsParameter.required=false
OptionsParameter.default=null
OptionsParameter.type=PARAMETER_TYPES.OPTIONS
OptionsParameter.options={}
OptionsParameter.handle=function(args,index)
if not (args.hasIndex(index)) and self.required then
return Error.New("Missing required parameter: "+self.name)
end if
if not (args.hasIndex(index)) then
return self.options[self.default]
end if
arg=args[index]
if self.options.hasIndex(self.name) and not (self.options.hasIndex(arg)) then
return arg
end if
if not (self.options.hasIndex(arg)) then
return Error.New("Invalid option: "+arg)
end if
return self.options[arg]
end function
OptionsParameter.New=function(options)
param=new OptionsParameter
if options.hasIndex("name") then
param.name=options.name
end if
if not options.hasIndex("name") then
return Error.New("Missing required parameter: name")
end if
if options.hasIndex("required") then
param.required=options.required
end if
if not options.hasIndex("required") then
param.required=false
end if
if options.hasIndex("default") then
param.default=options.default
end if
if not options.hasIndex("default") then
param.default=null
end if
if options.hasIndex("options") then
param.options=options.options
end if
if not options.hasIndex("options") then
return Error.New("Missing required parameter: options")
end if
return param
end function
RestParameter={}
RestParameter.name=null
RestParameter.required=false
RestParameter.default=null
RestParameter.type=PARAMETER_TYPES.REST
RestParameter.handle=function(args,index)
if not (args.hasIndex(index)) and self.required then
return Error.New("Missing required parameter: "+self.name)
end if
if not (args.hasIndex(index)) then
return self.default
end if
return slice(args,index,args.len).join(" ")
end function
RestParameter.New=function(options)
param=new RestParameter
if options.hasIndex("name") then
param.name=options.name
end if
if not options.hasIndex("name") then
return Error.New("Missing required parameter: name")
end if
if options.hasIndex("required") then
param.required=options.required
end if
if not options.hasIndex("required") then
param.required=false
end if
if options.hasIndex("default") then
param.default=options.default
end if
if not options.hasIndex("default") then
param.default=null
end if
return param
end function
FlagParameter={}
FlagParameter.name=null
FlagParameter.required=false
FlagParameter.type=PARAMETER_TYPES.FLAG
FlagParameter.flag=null
FlagParameter.handle=function(args,index)
if not (args.hasIndex(index)) and self.required then
return Error.New("Missing required parameter: "+self.name)
end if
if not (args.hasIndex(index)) then
return false
end if
arg=args[index]
if arg==self.flag then
return true
end if
return false
end function
FlagParameter.New=function(options)
param=new FlagParameter
if options.hasIndex("name") then
param.name=options.name
end if
if not options.hasIndex("name") then
return Error.New("Missing required parameter: name")
end if
if options.hasIndex("required") then
param.required=options.required
end if
if not options.hasIndex("required") then
param.required=false
end if
if options.hasIndex("default") then
param.default=options.default
end if
if not options.hasIndex("default") then
param.default=null
end if
if options.hasIndex("flag") then
param.flag=options.flag
end if
if not options.hasIndex("flag") then
return Error.New("Missing required parameter: flag")
end if
return param
end function
Parameter={}
Parameter.name=null
Parameter.required=false
Parameter.default=null
Parameter.type=null
Parameter.handle=function(args,index)
if not (args.hasIndex(index)) and self.required then
return Error.New("Missing required parameter: "+self.name)
end if
if not (args.hasIndex(index)) then
return self.default
end if
arg=args[index]
if self.type==PARAMETER_TYPES.STRING then
return arg
end if
if self.type==PARAMETER_TYPES.NUMBER then
if typeof(to_int(arg))=="string" then
return Error.New("Invalid parameter type: "+self.type)
end if
return to_int(arg)
end if
if self.type==PARAMETER_TYPES.BOOLEAN then
if arg=="true" then
return true
end if
if arg=="false" then
return false
end if
return Error.New("Invalid parameter type: "+self.type)
end if
return Error.New("Invalid parameter type: "+self.type)
end function
Parameter.New=function(options)
param=new Parameter
if options.hasIndex("name") then
param.name=options.name
end if
if not options.hasIndex("name") then
return Error.New("Missing required parameter: name")
end if
if options.hasIndex("required") then
param.required=options.required
end if
if not options.hasIndex("required") then
param.required=false
end if
if options.hasIndex("default") then
param.default=options.default
end if
if not options.hasIndex("default") then
param.default=null
end if
if options.hasIndex("type") then
param.type=options.type
end if
if not options.hasIndex("type") then
param.type=PARAMETER_TYPES.STRING
end if
return param
end function
Command={}
Command.name=null
Command.description=null
Command.parameters=[]
Command.callback=null
Command.permissions={"object":"file","privilege":"guest"}
Command.execute=function(args)
parameters=self.parseArgsToParameters(args.split(" "))
if parameters isa Error then
return parameters
end if
return self.callback(parameters)
end function
Command.help=function()
help=self.name+" "
for param in self.parameters
if param.required then
help=help+"<"+param.name+"> "
end if
if not (param.required) then
help=help+"["+param.name+"] "
end if
end for
help=help+self.description
return help
end function
Command.parseArgsToParameters=function(args)
parameters={}
handleRemoveEmpty=function(value)
return value!=""
end function
args=filter(args,@handleRemoveEmpty)
if self.parameters.len==0 then
return parameters
end if
for i in range(0,self.parameters.len-1)
param=self.parameters[i]
parameters[param.name]=param.handle(args,i)
if parameters[param.name] isa Error then
return parameters[param.name]
end if
if param.type==PARAMETER_TYPES.REST then
break
end if
end for
return parameters
end function
Command.New=function(options)
command=new Command
if options.hasIndex("name") then
command.name=options.name
end if
if not options.hasIndex("name") then
return Error.New("Missing required parameter: name")
end if
if options.hasIndex("description") then
command.description=options.description
end if
if not options.hasIndex("description") then
command.description=""
end if
if options.hasIndex("parameters") then
command.parameters=options.parameters
end if
if not options.hasIndex("parameters") then
command.parameters=[]
end if
if options.hasIndex("callback") then
command.callback=@options.callback
end if
if not options.hasIndex("callback") then
return Error.New("Missing required parameter: callback")
end if
if options.hasIndex("permissions") then
command.permissions={"object":"file","privilege":"guest"}+options.permissions
end if
if not options.hasIndex("permissions") then
command.permissions={"object":"file","privilege":"guest"}
end if
return command
end function