#import Command from "/managers/command/command.src";
#import ExtensionMediator from "/mediator.src";
#import LIB_TYPES from "/managers/lib/lib_types.gs";
#import Router from "/facades/network/router.src";
#import Session from "/managers/session/session.src";

// @type ExploitScanCMD
// @property {SessionManager} sessionManager
// @property {ViperUi} viperUi
// @property {ThemeManager} themeManager
// @property {LibManager} libManager
// @property {Printer} printer
// @property {ConfigManager} configManager
// @property {MetaxploitManager} metaxploitManager
ExploitScanCMD = new Command

// @param {ViperUi} viperUi
// @param {SessionManager} sessionManager
// @param {ThemeManager} themeManager
// @param {LibManager} libManager
// @param {Printer} printer
// @param {ConfigManager} configManager
// @param {MetaxploitManager} metaxploitManager
// @return {ExploitScanCMD}
ExploitScanCMD.New = function(viperUi, sessionManager, themeManager, libManager, printer, configManager, metaxploitManager)
  return (new self)._new(
    viperUi,
    sessionManager,
    themeManager,
    libManager,
    printer,
    configManager,
    metaxploitManager)
end function

// @param {ViperUi} viperUi
// @param {SessionManager} sessionManager
// @param {ThemeManager} themeManager
// @param {LibManager} libManager
// @param {Printer} printer
// @param {ConfigManager} configManager
// @param {MetaxploitManager} metaxploitManager
// @return {ExploitScanCMD}
ExploitScanCMD._new = function(viperUi, sessionManager, themeManager, libManager, printer, configManager, metaxploitManager)
  if not printer then Error.panic("Printer is required", #filename, #line)
  if not sessionManager then Error.panic("SessionManager is required", #filename, #line)
  if not viperUi then Error.panic("ViperUi is required", #filename, #line)
  if not themeManager then Error.panic("ThemeManager is required", #filename, #line)
  if not libManager then Error.panic("LibManager is required", #filename, #line)
  if not configManager then Error.panic("ConfigManager is required", #filename, #line)

  super._new({
    "name": "exploitscan",
    "description": "Scan the network for exploits",
    "parameters": [
      Parameter.New({
        "name": "address",
        "required": true,
      }),
      Parameter.New({
        "name": "port",
        "required": false,
      }),
      Parameter.New({
        "name": "options",
        "required": false,
      }),
    ],
  })

  self.sessionManager = sessionManager
  self.viperUi = viperUi
  self.themeManager = themeManager
  self.libManager = libManager
  self.printer = printer
  self.configManager = configManager
  self.metaxploitManager = metaxploitManager

  return self
end function

ExploitScanCMD.handle = function(params)
  address = params.address
  port = params.port
  options = params.options

  objects = self.metaxploitManager.hack(address, port, options)
  if objects isa Error then return objects

  if not is_valid_ip(address) then
    lib = self.libManager.getCurrentLib("metaxploit")
    address = lib.data.ip
  else
    if is_lan_ip(address) then address = self.libManager.getCurrentLib("metaxploit").data.ip.public
    if port == null then return Error.New("Port is required")
    router = Router.New(address)
    if router isa Error then return router
    devices = router.devices

    theDevice = null
    for device in devices
      for p in device.value
        if (p.open or p.port == 8080) and p.port == to_int(port) then
          theDevice = device
          break
        end if
      end for
    end for
    if theDevice == null then return Error.New("Port is not open/found")
    localIp = theDevice.key
    publicIp = address
    address = {
      "local": theDevice.key,
      "public": publicIp,
    }
  end if

  for object in objects
    if object isa Shell then
      self.sessionManager.addSession(Session.WrapShell(object))
    else 
      self.sessionManager.addSession(Session.New(object, { "ip": address }))
    end if  
  end for
end function

module.exports = ExploitScanCMD