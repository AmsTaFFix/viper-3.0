import_code("../error.src")
import_code("../functional.src")

Command = {}
Command.name = null
Command.description = null
Command.parameters = []
Command.callback = null
Command.permissions = {
    "object": "file",
    "privilege": "guest"
}
Command.execute = function(args)
    parameters = self.parseArgsToParameters(args.split(" "))
    if parameters isa Error then return parameters
    return self.callback(parameters)
end function
Command.help = function()
    help = self.name + " "
    for param in self.parameters
        if param.required then help = help +  "<" + param.name + "> "
        if not(param.required) then help = help + "[" + param.name + "] "
    end for
    help = help + self.description
    return help
end function
Command.parseArgsToParameters = function(args)
    parameters = {}
    handleRemoveEmpty = function(value)
        return value != ""
    end function
    args = filter(args, @handleRemoveEmpty)
    if self.parameters.len() == 0 then return parameters
    for i in range(0, self.parameters.len() - 1)
        param = self.parameters[i]
        parameters[param.name] = null
        if args.hasIndex(i) then parameters[param.name] = args[i]
        if param.required and parameters[param.name] == null then return Error.New("Missing required parameter: " + param.name)
        if param.hasIndex("default") and parameters[param.name] == null then parameters[param.name] = param.default
        if param.hasIndex("type") and param.type == "rest" then 
            parameters[param.name] = slice(args, i, args.len()).join(" ")
            break
        end if
    end for
    return parameters
end function
Command.New = function(options)
    command = new Command
    if options.hasIndex("name") then command.name = options.name
    if not options.hasIndex("name") then return Error.New("Missing required parameter: name")
    if options.hasIndex("description") then command.description = options.description
    if not options.hasIndex("description") then command.description = ""
    if options.hasIndex("parameters") then command.parameters = options.parameters
    if not options.hasIndex("parameters") then command.parameters = []
    if options.hasIndex("callback") then command.callback = @options.callback
    if not options.hasIndex("callback") then return Error.New("Missing required parameter: callback")
    if options.hasIndex("permissions") then command.permissions = {
        "object": "file",
        "privilege": "guest"
    } + options.permissions
    if not options.hasIndex("permissions") then command.permissions = {
        "object": "file",
        "privilege": "guest"
    }
    return command
end function