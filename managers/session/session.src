#import Error from "/new/error.gs"
#import File from "/facades/computer-objects/file.src"
#import Computer from "/facades/computer-objects/computer.src"
#import Shell from "/facades/computer-objects/shell.src"
#import computerObjectFactory from "/facades/computer-objects/computer-object-factory.src"
#import FileSession from "/managers/session/file.src"
#import ComputerSession from "/managers/session/computer.src"
#import ShellSession from "/managers/session/shell.src"

// @type Session
// @property {File|Computer|Shell} handler
Session = {}
Session.handler = null
Session.data = {
    "ip": null
}
// @param {Session|File|Computer|Shell|file|computer|shell} object
// @return {Session|Error}
Session.New = function (object, data)
    if typeof(object) == "file" then 
        object = computerObjectFactory(object)
    else if typeof(object) == "computer" then 
        object = computerObjectFactory(object)
    end if

    if object isa File then 
        object = FileSession.New(object)
    else if object isa Computer then 
        object = ComputerSession.New(object)
    end if

    if not(object isa ComputerSession) and not(object isa FileSession) then 
        print(object)
        Error.Panic("Invalid session object", #filename, #line)
    end if

    result = new self

    result.handler = object
    result.data = data

    if object isa ComputerSession then
        result.data = {}
        result.data.ip = object.ip
    else if object isa FileSession and data.ip == null then
        Error.Panic("File session requires ip", #filename, #line)
    end if

    if object.user == "root" then
        object.goTo("/root")
    else
        object.goTo("/home/" + object.user)
    end if

    return result
end function

// @param {Shell} shell
// @return {Session|Error}
Session.WrapShell = function(shell)
    if not shell isa Shell then return Error.Panic("Invalid Shell", #filename, #line)
    handler = ShellSession.New(shell)
    
    result = new self
    result.handler = handler
    result.data = {
        "ip": result.handler.ip
    }

    if handler.user == "root" then
        handler.goTo("/root")
    else
        handler.goTo("/home/" + handler.user)
    end if

    return result
end function

module.exports = Session