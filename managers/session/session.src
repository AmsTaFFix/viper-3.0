#import Error from "/new/error.gs"
#import File from "/facades/computer-objects/file.src"
#import Computer from "/facades/computer-objects/computer.src"
#import Shell from "/facades/computer-objects/shell.src"
#import computerObjectFactory from "/facades/computer-objects/computer-object-factory.src"
#import FileSession from "/managers/session/file.src"
#import ComputerSession from "/managers/session/computer.src"
#import ShellSession from "/managers/session/shell.src"

// @type Session
// @property {File|Computer|Shell} handler
Session = {}
Session.handler = null
Session.data = {
    "ip": null
}
// @param {Session|File|Computer|Shell} handler
// @return {Session|Error}
Session.New = function (handler, data)
    if handler isa Session then return handler
    result = new Session
    
    if typeof(handler) == "file" then 
        handler = computerObjectFactory(handler)
    else if typeof(handler) == "computer" then 
        handler = computerObjectFactory(handler)
    else if typeof(handler) == "shell" then 
        handler = computerObjectFactory(handler)
    end if

    if handler isa File then 
        handler = FileSession.New(handler)
    else if handler isa Computer then 
        handler = ComputerSession.New(handler)
    else if handler isa Shell then 
        handler = ShellSession.New(handler)
    end if

    if not(handler isa ShellSession) and not(handler isa ComputerSession) and not(handler isa FileSession) then 
        return Error.New("Invalid session handler")
    end if

    result.handler = handler
    result.data = data

    if handler isa ComputerSession or handler isa ShellSession then
        result.data = {}
        result.data.ip = handler.ip
    else if handler isa FileSession and data.ip == null then
        return Error.New("File session requires ip")
    end if

    if handler.user == "root" then
        handler.goTo("/root")
    else
        handler.goTo("/home/" + handler.user)
    end if

    return result
end function

module.exports = Session