#import Error from "/new/error.gs"
#import Fn from "/new/fn.gs"
import_code("../../facades/lib-objects/metaxploit.src")
#import Crypto from "/facades/lib-objects/crypto.src"
#import LIB_TYPES from "/managers/lib/lib_types.gs"
#import Lib from "/managers/lib/lib.gs"

LibManager = {}
LibManager.mediator = null
LibManager.libs = []
LibManager.currentLibs = {
    LIB_TYPES.METAXPLOIT: null,
    LIB_TYPES.CRYPTO: null
}
LibManager.pivotLibs = {
    LIB_TYPES.METAXPLOIT: null,
    LIB_TYPES.CRYPTO: null
}
LibManager.addLib = function(lib, data)
    lib = Lib.New(lib, data)
    if lib isa Error then return lib
   
    self.libs.push(lib)
    if self.currentLibs[lib.type] == null then self.currentLibs[lib.type] = lib
    if self.pivotLibs[lib.type] == null then self.pivotLibs[lib.type] = lib

    findMetaxploitOnIp = function(lib)
        if lib.type == LIB_TYPES.METAXPLOIT and lib.ip.local == data.ip.local and lib.ip.public == data.ip.public then return true
        return false
    end function
    if lib.type == LIB_TYPES.METAXPLOIT then
        metalib = lib.lib.getLib(data.path)
        if metalib == null then return Error.New("Metaxploit lib not found")
        lib.data.version = metalib.version
    else if Fn.some(self.libs, @findMetaxploitOnIp) then
        metaxploit = Fn.find(self.libs, @findMetaxploitOnIp)
        if metaxploit == null then return Error.New("Metaxploit lib not found")
        metalib = metaxploit.lib.getLib(data.path)
        if metalib == null then return Error.New("Metaxploit lib not found")
        lib.data.version = metalib.version
    end if
end function
LibManager.getLib = function(id)
    if self.libs.hasIndex(id) then return self.libs[id]
    return Error.New("Lib with id " + id + " not found")
end function
LibManager.getCurrentLib = function(libType)
    return self.currentLibs[libType]
end function
LibManager.setCurrentLib = function(lib)
    self.currentLibs[lib.type] = lib
end function
LibManager.getPivotLib = function(libType)
    return self.pivotLibs[libType]
end function
LibManager.setPivotLib = function(libType, lib)
    self.pivotLibs[libType] = lib
end function
LibManager.setMediator = function (mediator)
    self.mediator = mediator
end function
LibManager.New = function()
    result = new LibManager
    result.libs = []
    result.currentLibs = {
        LIB_TYPES.METAXPLOIT: null,
        LIB_TYPES.CRYPTO: null
    }
    result.pivotLibs = {
        LIB_TYPES.METAXPLOIT: null,
        LIB_TYPES.CRYPTO: null
    }
    return result
end function